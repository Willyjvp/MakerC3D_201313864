package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

parser code
{:

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println(":(");
        System.err.println(s);
    }

:}

action code
{:
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal TokenC3D IGUAL_IGUAL, MENOR, MAYOR, MENORI, MAYORI, DIFi;
terminal TokenC3D NOT, AND, OR;
nonterminal NodoC3D inicial, expresion, COND, REL, OPERADOR;

precedence left AND, OR;
precedence right NOT;
precedence left IGUAL_IGUAL, MENOR, MAYOR, MENORI, MAYORI, DIFi;
precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 

start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} COND:conds 
                    {: 
                        RESULT = conds;
                        ControlC3D.agregarC3D("//Ãšltimo valor: " + conds.getCad());
                    :};



COND ::=    COND:izq OR COND:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " || " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            | COND:izq AND COND:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " && " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            | NOT  COND:izq   
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = "+" ! " + izq.getCad()   + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            | REL ;

            
REL::=      REL:relI OPERADOR:opR REL:relD {:
                        String etVerdadero =  ControlC3D.generaEti();
                        String etFalso =  ControlC3D.generaEti();
                        ControlC3D.agregarC3D("if "+relI.getCad() +" "+opR.getCad()+" "+relD.getCad() +" go to "+etVerdadero+";\n"+
                                              "go to "+etFalso+";\n");
                        RESULT =  new NodoC3D(etFalso, etVerdadero);
                             :}
            | expresion:exp  {: RESULT = exp; :} ;


OPERADOR::=   MAYOR  {: RESULT = new NodoC3D(">"); :}
            | MENOR  {: RESULT = new NodoC3D("<"); :}
            | MAYORI {: RESULT = new NodoC3D(">="); :}
            | MENORI {: RESULT = new NodoC3D("<="); :}
            | DIFi   {: RESULT = new NodoC3D("!="); :}
            | IGUAL_IGUAL {: RESULT = new NodoC3D("=="); :} ;


expresion::=  expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            
            
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ COND:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;